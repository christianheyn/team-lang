global alias tdd "./modules/tdd/"
global alias utils "./helper/"

import (fa fb fc) from "./FeatureA.team"
import "./FeatureB.team" as b

feature {run () (print "RUN")}

instance Functor T {
    {fmap (f t) (f t)}
}

{askForTask () (do
    (print "What Task?")
    (let input = (readLine)
        (print input))
)}

project {team-lang @Strings -> Void (@args) (
    let var argLen = (length args)
        var arg1   = (head args)
        fun a (x) (+ x 1)
        type A = B String Number
        type Tuple <T1> <T2> <T3> = Pair T1 T2 | Triple T1 T2 T3
        if (?and (not ?equals argLen 0) (?equals arg1 "execute") )
            then (run)
            else (askForTask)
)}

either Number String Boolean


class Functor <T> = {fmap <U> {T -> U} -> T -> U}

{add2 (x) (+ 2 ?)}

var html = xml
    <div key="value" key2={(getValue)}>
        {(getItem)}
    </div>

var html-string = (show html)
isJust :: Maybe <T> -> Bool

{isJust (m)
    (switch m
        void then false
        otherwise true)

    catch {(x) do (print x) x}}

type Attr = (( String,  maybe String ));

type XML = XML String [Attr] [either XML String];

type Either <X> <Y> = Left X |Â Right Y;

fun my-function [Attr] -> [XML] (attrs, children) (
        XML "div" (++ attrs [
                             (Attr "onClick" "jsFn()")
                            ]
                    ) children
    )

fun my-function [Attr] -> [XML] (attrs, children) xml
    <div {attrs} onClick="jsFn()" readonly>
        {"<!-- html kommentar -->"}
        {children}
    </div>

var html = xml
    <div>
        <{myFunction} {myAttributes}>children</{myFunction}>
    </div>

(( String, Number ))

var c Char = 'y';
type String = [Char];
type A = [ a: Number ] extends B
type C = { "user": User, "id": maybe String } extends D

var user (lens C -> User) = (focus "user");
var user-name (lens C -> String) = (focus user "name");

