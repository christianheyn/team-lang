import (a b c "./utils.team")
importAs (tdd "./tdd.team")

export (type MyType [a: Number b: String c: Bool])

(alias AType MyType)

export feature {main #@
    ([String] {(& String TEST) String} [a: Numbe, b: String, c: tdd.Type]})
    (args f)
    (run-n
        (print tdd.some)
        (print "Like Lisp it has
multiline strings")
        (print (++ "But " "Better" "!"))
        [ 2 3.5 4 5 ])}
    catch {(err) ()}

 export util {map (f xs) ()}


(var x Number 3+2i)



{getProp
    (Lens String)
    (p)
        (do
            (view p data))}
    catch {(err) (print err)}

{add (x) (+ x 1)}

(let
    (var a Number 3)
    (lens c c: 0 b:)
    {f (x y) (add x y)}
    (fun fn {(x) (x + 1)})
    (var l [Number] [1 2 3])

    (print (f a 3)))

{f (x) (print (view a: x))}

(lens a
    b: 0 d:)

(map add [1 2 3 4 5])           # -> [2 3 4 5 6]
(map {(x) (+ x 1)} [1 2 3 4 5]) # -> [2 3 4 5 6]
(map (+ 1) [1 2 3 4 5])         # -> [2 3 4 5 6]

test {() ()}

{add
    (x y)
    ((T Number) T T Number)
    (+ x y)
    (wip)}

{add
    ((x) (y))
    ((T Number) T T Number)
    (+ x y)
    (wip)}

{map
    (f xs)
    ((T)(U) {T U} [T] [U])
    (wip)
}
