import a b c "./utils.team"
importAs tdd "./tdd.team"

export all tdd

export (type MyType [a: Number b: String c: Bool])

(alias AType MyType)

export feature {main
    ([String] {(& String TEST) String} [a: Numbe, b: String, c: tdd.Type]})
    (args f)
    (do
        (print tdd.some)
        (print "Like Lisp it has
multiline strings")
        (print (++ "But " "Better" "!"))
        [ 2 3.5 4 5 ])}
    catch {(err) ()}

 export util {map (f xs) ()}


(var x Number 3+2i)

{++
    {(a b) (Number Number Number) (wip)}
    {(a b) (String String String) (wip)}
    {(a b) (Boolean Boolean Boolean) (wip)}}


(export feature {getProp
    (Lens String)
    (p)
        (do
            (view p data))}
    catch {(err) (print err)})

{add ([:x :y = 3] = [1 2]) (+ x y)}

(let
    (var a, Number 3)
    (lens c, c: 0 b:)
    {f (x y) (add x y)}
    (var fn {(x) (x + 1)})
    (var l, [Number] [1 2 3])

    (print (f a 3)))

{f (x) (print (view a: x))}

(lens a
    b: 0 d:)

export (enum Hello , :hi :moin :hello)

somethingImported.Hello:hi

(map add [1 2 3 4 5])           # -> [2 3 4 5 6]
(map {(x) (+ x 1)} [1 2 3 4 5]) # -> [2 3 4 5 6]
(map (+ 1) [1 2 3 4 5])         # -> [2 3 4 5 6]
(filter {a () ()} [1/3, 2/6, 3/7])

(if a
    then b
    else c)

{add
    <N = Number>
    <T>
    N -> T => N
    (x = 3 ; y = a)
    (+ x y)
    catch (err) (...)
}

{add
    ((x) (y))
    ((T Number) T T Number)
    (+ x y)
    (wip)}

export add

{fmap
    (f xs)
    (<T><U> {T -> U} [T] [U])
    (f (head xs))
}

{fn
    :: <T Number String Boolean>
       <U Number String Boolean>
       T -> U -> Number
}

class Functor <T> {
    fmap <U> {T -> U} -> [T] -> [U]
}

instance Functor Number {
    {fmap (f n) (f n)}
} 

Number -> {Maybe -> Number Void}

[a: Maybe T -> Number b: Void]

tbd {f
    <T> Maybe Number -> Maybe T -> Number -> @Number -> @tdd.Number
}

T -> @{T -> T} -> [T]

{+, @Number -> Number, (@ns) ()}
{+, @CNumber -> CNumber, (@ns) ()}

{n+cn CNumber -> maybe Number -> CNumber (n cn) (+ (toComplex n) cn)}

 { T -> U }
(fun add2+n+n+n (+ 2 @ @ @))

type UserJSON {
    "name" String
    "age" Number
    "member" Bool
    "info" { "msg" String }
    }

type Prop = <T><U> lens {T -> U} 

either Number Null

(let
    {f1 () ()}
    var a Number = 2
    var tuple (Number Number String) = 1 2 "text"
    var l [maybe Number] = [1 2 3 void]
    var f Number -> Number = {(x) (+ x 1)}
    var f Number -> String = (<<< f3 f2 f1)
    var f Number -> String = (>>> f1 f2 f3)
    var userMsg Prop = (==> "info" "msg")
    enum E = :e = 3 :f = 2 :g = 5
    var x E = E:e
    type A = [a: Number, b: String]
    type UserJSON = {
                    "name" String
                    "age" Number
                    "member" Bool
                    "info" Info
                    }
    (do
        (print a)
        (print (map f b))
    )
)

{main () (print a)}

{startServer Number -> Void
    (port)
    (server port
        Server:get "/health" {() { "ok" true }}
        Server:put "/hello" hello
    )
)

(var Number a (if (< b 3)
               then 4
               else 2))

(switch a
    (4 "four")
    (5 "five")
    (6 "six")
    otherwise "wrong number")

test {

}
