import (a b c "./utils.team")
importAs (tdd "./tdd.team")

export (type MyType [a: Number b: String c: Bool])

(alias AType MyType)

export feature {
    main #@
    {[String] {(& String TEST) String} [a: Number b: String c: tdd.Type]}
    (args f)
    (run-n
        (print tdd.some)
        (print "Like Lisp it has
multiline strings")
        (print (++ "But " "Better" "!"))
        [ 2 3.5 4 5 ])}
    catch {(err) ()}

 export util {map (f xs) ()}

# () {} []

(let x Number 3+2i (print x))

(lets
    x' Number -1/7
    y String "Y as string"
    z Prop someProp:
    (progn
        (print x')
        (print y)))

{getProp
    (Prop String)
    (p)
    (view p data)

    {catch (e) ()}}

{add (x) (+ x 1)}

(map add [1 2 3 4 5])           # -> [2 3 4 5 6]
(map {(x) (+ x 1)} [1 2 3 4 5]) # -> [2 3 4 5 6]
(map (+ 1) [1 2 3 4 5])         # -> [2 3 4 5 6]
