import a b c "./utils.team"
importAs tdd "./tdd.team"

export (type MyType [a: Number b: String c: Bool])

(alias AType MyType)

export feature {main #@
    ([String] {(& String TEST) String} [a: Numbe, b: String, c: tdd.Type]})
    (args f)
    (do
        (print tdd.some)
        (print "Like Lisp it has
multiline strings")
        (print (++ "But " "Better" "!"))
        [ 2 3.5 4 5 ])}
    catch {(err) ()}

 export util {map (f xs) ()}

 +(-(2 3) 4)


(var x Number 3+2i)

{++
    {(a b) (Number Number Number) (wip)}
    {(a b) (String String String) (wip)}
    {(a b) (Boolean Boolean Boolean) (wip)}}


(export feature {getProp
    (Lens String)
    (p)
        (do
            (view p data))}
    catch {(err) (print err)})

{add (x) (+ x 1)}

(let
    (var a Number 3)
    (lens c c: 0 b:)
    {f (x y) (add x y)}
    (fun fn {(x) (x + 1)})
    (var l [Number] [1 2 3])

    (print (f a 3)))

{f (x) (print (view a: x))}

(lens a
    b: 0 d:)

export (enum Hello , :hi = 1 :moin = 2 :hello = 3)

somethingImported.Hello:hi

(map add [1 2 3 4 5])           # -> [2 3 4 5 6]
(map {(x) (+ x 1)} [1 2 3 4 5]) # -> [2 3 4 5 6]
(map (+ 1) [1 2 3 4 5])         # -> [2 3 4 5 6]
(filter {a () ()} [1/3, 2/6, 3/7])
test {() ()}

(if a
    then b
    else c)

{add
    <N = Number> N -> N => N
    (x = 3 ; y = a)
    (+ x y)
    catch (err) (throw AddError)
}

{add
    ((x) (y))
    ((T Number) T T Number)
    (+ x y)
    (wip)}

{map
    (f xs)
    ((T)(U) {T U} [T] [U])
    (wip)
}
