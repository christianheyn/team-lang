import a b c "./utils.team"
importAs tdd "./tdd.team"

exportAll tdd

export (type MyType [a: Number b: String c: Bool])

(alias AType MyType)

export feature {main
    ([String] {(& String TEST) String} [a: Numbe, b: String, c: tdd.Type]})
    (args f)
    (do
        (print tdd.some)
        (print "Like Lisp it has
multiline strings")
        (print (++ "But " "Better" "!"))
        [ 2 3.5 4 5 ])}
    catch {(err) ()}

 export util {map (f xs) ()}


(var x Number 3+2i)

{++
    {(a b) (Number Number Number) (wip)}
    {(a b) (String String String) (wip)}
    {(a b) (Boolean Boolean Boolean) (wip)}}


(export feature {getProp
    (Lens String)
    (p)
        (do
            (view p data))}
    catch {(err) (print err)})

{add ([:x :y = 3] = [1 2]) (+ x y)}

(let
    (var a, Number 3)
    (lens c, c: 0 b:)
    {f (x y) (add x y)}
    (var fn {(x) (x + 1)})
    (var l, [Number] [1 2 3])

    (print (f a 3)))

{f (x) (print (view a: x))}

(lens a
    b: 0 d:)

export (enum Hello , :hi :moin :hello)

somethingImported.Hello:hi

(map add [1 2 3 4 5])           # -> [2 3 4 5 6]
(map {(x) (+ x 1)} [1 2 3 4 5]) # -> [2 3 4 5 6]
(map (+ 1) [1 2 3 4 5])         # -> [2 3 4 5 6]
(filter {a () ()} [1/3, 2/6, 3/7])

(if a
    then b
    else c)

{add
    <N = Number>
    <T>
    N -> T => N
    (x = 3 ; y = a)
    (+ x y)
    catch (err) (...)
}

{add
    ((x) (y))
    ((T Number) T T Number)
    (+ x y)
    (wip)}

export add

{fmap
    (f xs)
    (<T><U> {T -> U} [T] [U])
    (f (head xs))
}

{fn
    :: <T Number String Boolean>
       <U Number String Boolean>
       T -> U -> Number
}

class Functor <T> {
    fmap <U> {T -> U} -> [T] -> [U]
}

export instance Functor Number {
    {fmap (fn n) (fn n)}
}


Number -> {Maybe -> Number Void}
(maybe 3)